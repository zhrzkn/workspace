
HAL_Task_Delete_Standart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000298c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b44  08002b44  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002b44  08002b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b4c  08002b4c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b4c  08002b4c  00012b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b50  08002b50  00012b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00003fd0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003fe0  20003fe0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006982  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001849  00000000  00000000  000269c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e0  00000000  00000000  00028210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000608  00000000  00000000  000288f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020225  00000000  00000000  00028ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008381  00000000  00000000  0004911d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c52e6  00000000  00000000  0005149e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00116784  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001978  00000000  00000000  001167d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002b04 	.word	0x08002b04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08002b04 	.word	0x08002b04

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	2000002c 	.word	0x2000002c
 8000504:	20000080 	.word	0x20000080

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 f999 	bl	8000844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f825 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f881 	bl	800061c <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
 xTaskCreate(Task1_Handler, "Task1", 128, NULL, 4, &Task1Handle);
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <main+0x40>)
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	2304      	movs	r3, #4
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	2280      	movs	r2, #128	; 0x80
 8000526:	4909      	ldr	r1, [pc, #36]	; (800054c <main+0x44>)
 8000528:	4809      	ldr	r0, [pc, #36]	; (8000550 <main+0x48>)
 800052a:	f001 f9eb 	bl	8001904 <xTaskCreate>

  /* definition and creation of Task2 */
 xTaskCreate(Task2_Handler, "Task2", 128, NULL, 3, &Task2Handle);
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <main+0x4c>)
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	2303      	movs	r3, #3
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2300      	movs	r3, #0
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	4907      	ldr	r1, [pc, #28]	; (8000558 <main+0x50>)
 800053c:	4807      	ldr	r0, [pc, #28]	; (800055c <main+0x54>)
 800053e:	f001 f9e1 	bl	8001904 <xTaskCreate>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8000542:	f001 fba5 	bl	8001c90 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000546:	e7fe      	b.n	8000546 <main+0x3e>
 8000548:	20000280 	.word	0x20000280
 800054c:	08002b1c 	.word	0x08002b1c
 8000550:	080006c1 	.word	0x080006c1
 8000554:	20000284 	.word	0x20000284
 8000558:	08002b24 	.word	0x08002b24
 800055c:	08000701 	.word	0x08000701

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fac0 	bl	8002af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <SystemClock_Config+0xb4>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a21      	ldr	r2, [pc, #132]	; (8000614 <SystemClock_Config+0xb4>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SystemClock_Config+0xb4>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <SystemClock_Config+0xb8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a1b      	ldr	r2, [pc, #108]	; (8000618 <SystemClock_Config+0xb8>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <SystemClock_Config+0xb8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0320 	add.w	r3, r7, #32
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fc9b 	bl	8000f0c <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005dc:	f000 f8a0 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fefe 	bl	80013fc <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000606:	f000 f88b 	bl	8000720 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	; 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <MX_GPIO_Init+0x98>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a1e      	ldr	r2, [pc, #120]	; (80006b4 <MX_GPIO_Init+0x98>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <MX_GPIO_Init+0x98>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_GPIO_Init+0x98>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <MX_GPIO_Init+0x98>)
 8000658:	f043 0308 	orr.w	r3, r3, #8
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_GPIO_Init+0x98>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000670:	4811      	ldr	r0, [pc, #68]	; (80006b8 <MX_GPIO_Init+0x9c>)
 8000672:	f000 fc17 	bl	8000ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000676:	2301      	movs	r3, #1
 8000678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	4619      	mov	r1, r3
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <MX_GPIO_Init+0xa0>)
 800068a:	f000 fa57 	bl	8000b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800068e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_GPIO_Init+0x9c>)
 80006a8:	f000 fa48 	bl	8000b3c <HAL_GPIO_Init>

}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40020c00 	.word	0x40020c00
 80006bc:	40020000 	.word	0x40020000

080006c0 <Task1_Handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_Handler */
void Task1_Handler(void *params)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13);
 80006c8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <Task1_Handler+0x34>)
 80006ce:	f000 fc02 	bl	8000ed6 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80006d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d6:	f000 f927 	bl	8000928 <HAL_Delay>

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)== GPIO_PIN_SET)
 80006da:	2101      	movs	r1, #1
 80006dc:	4806      	ldr	r0, [pc, #24]	; (80006f8 <Task1_Handler+0x38>)
 80006de:	f000 fbc9 	bl	8000e74 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d1ef      	bne.n	80006c8 <Task1_Handler+0x8>
	 	     		{
		 vTaskDelete(Task1Handle);
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <Task1_Handler+0x3c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fa3f 	bl	8001b70 <vTaskDelete>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13);
 80006f2:	e7e9      	b.n	80006c8 <Task1_Handler+0x8>
 80006f4:	40020c00 	.word	0x40020c00
 80006f8:	40020000 	.word	0x40020000
 80006fc:	20000280 	.word	0x20000280

08000700 <Task2_Handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_Handler */
void Task2_Handler(void *params)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_Handler */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14 | GPIO_PIN_15);
 8000708:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800070c:	4803      	ldr	r0, [pc, #12]	; (800071c <Task2_Handler+0x1c>)
 800070e:	f000 fbe2 	bl	8000ed6 <HAL_GPIO_TogglePin>
	   HAL_Delay(1000);
 8000712:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000716:	f000 f907 	bl	8000928 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14 | GPIO_PIN_15);
 800071a:	e7f5      	b.n	8000708 <Task2_Handler+0x8>
 800071c:	40020c00 	.word	0x40020c00

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	e7fe      	b.n	8000728 <Error_Handler+0x8>
	...

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_MspInit+0x54>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	4a11      	ldr	r2, [pc, #68]	; (8000780 <HAL_MspInit+0x54>)
 800073c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000740:	6453      	str	r3, [r2, #68]	; 0x44
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <HAL_MspInit+0x54>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <HAL_MspInit+0x54>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <HAL_MspInit+0x54>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	6413      	str	r3, [r2, #64]	; 0x40
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <HAL_MspInit+0x54>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	210f      	movs	r1, #15
 800076e:	f06f 0001 	mvn.w	r0, #1
 8000772:	f000 f9ba 	bl	8000aea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <NMI_Handler+0x4>

0800078a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <HardFault_Handler+0x4>

08000790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <MemManage_Handler+0x4>

08000796 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <BusFault_Handler+0x4>

0800079c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <UsageFault_Handler+0x4>

080007a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b4:	f000 f898 	bl	80008e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007b8:	f001 fd5e 	bl	8002278 <xTaskGetSchedulerState>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d001      	beq.n	80007c6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007c2:	f001 ff39 	bl	8002638 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <SystemInit+0x20>)
 80007d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007d6:	4a05      	ldr	r2, [pc, #20]	; (80007ec <SystemInit+0x20>)
 80007d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000828 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007f6:	490e      	ldr	r1, [pc, #56]	; (8000830 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007f8:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007fc:	e002      	b.n	8000804 <LoopCopyDataInit>

080007fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000802:	3304      	adds	r3, #4

08000804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000808:	d3f9      	bcc.n	80007fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080a:	4a0b      	ldr	r2, [pc, #44]	; (8000838 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800080c:	4c0b      	ldr	r4, [pc, #44]	; (800083c <LoopFillZerobss+0x26>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000810:	e001      	b.n	8000816 <LoopFillZerobss>

08000812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000814:	3204      	adds	r2, #4

08000816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000818:	d3fb      	bcc.n	8000812 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800081a:	f7ff ffd7 	bl	80007cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800081e:	f002 f945 	bl	8002aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000822:	f7ff fe71 	bl	8000508 <main>
  bx  lr    
 8000826:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000828:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000834:	08002b54 	.word	0x08002b54
  ldr r2, =_sbss
 8000838:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800083c:	20003fe0 	.word	0x20003fe0

08000840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC_IRQHandler>
	...

08000844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_Init+0x40>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <HAL_Init+0x40>)
 800084e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <HAL_Init+0x40>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <HAL_Init+0x40>)
 800085a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800085e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_Init+0x40>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a07      	ldr	r2, [pc, #28]	; (8000884 <HAL_Init+0x40>)
 8000866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800086a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800086c:	2003      	movs	r0, #3
 800086e:	f000 f931 	bl	8000ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000872:	200f      	movs	r0, #15
 8000874:	f000 f808 	bl	8000888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000878:	f7ff ff58 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023c00 	.word	0x40023c00

08000888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_InitTick+0x54>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_InitTick+0x58>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089e:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f93b 	bl	8000b22 <HAL_SYSTICK_Config>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e00e      	b.n	80008d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	d80a      	bhi.n	80008d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008bc:	2200      	movs	r2, #0
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	f000 f911 	bl	8000aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c8:	4a06      	ldr	r2, [pc, #24]	; (80008e4 <HAL_InitTick+0x5c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e000      	b.n	80008d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20000008 	.word	0x20000008
 80008e4:	20000004 	.word	0x20000004

080008e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_IncTick+0x20>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_IncTick+0x24>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4413      	add	r3, r2
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_IncTick+0x24>)
 80008fa:	6013      	str	r3, [r2, #0]
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000008 	.word	0x20000008
 800090c:	20000288 	.word	0x20000288

08000910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <HAL_GetTick+0x14>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000288 	.word	0x20000288

08000928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000930:	f7ff ffee 	bl	8000910 <HAL_GetTick>
 8000934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000940:	d005      	beq.n	800094e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <HAL_Delay+0x44>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4413      	add	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800094e:	bf00      	nop
 8000950:	f7ff ffde 	bl	8000910 <HAL_GetTick>
 8000954:	4602      	mov	r2, r0
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	429a      	cmp	r2, r3
 800095e:	d8f7      	bhi.n	8000950 <HAL_Delay+0x28>
  {
  }
}
 8000960:	bf00      	nop
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008

08000970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800098c:	4013      	ands	r3, r2
 800098e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800099c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a2:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	60d3      	str	r3, [r2, #12]
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <__NVIC_GetPriorityGrouping+0x18>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	f003 0307 	and.w	r3, r3, #7
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	6039      	str	r1, [r7, #0]
 80009de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	db0a      	blt.n	80009fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	490c      	ldr	r1, [pc, #48]	; (8000a20 <__NVIC_SetPriority+0x4c>)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	0112      	lsls	r2, r2, #4
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	440b      	add	r3, r1
 80009f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009fc:	e00a      	b.n	8000a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4908      	ldr	r1, [pc, #32]	; (8000a24 <__NVIC_SetPriority+0x50>)
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	f003 030f 	and.w	r3, r3, #15
 8000a0a:	3b04      	subs	r3, #4
 8000a0c:	0112      	lsls	r2, r2, #4
 8000a0e:	b2d2      	uxtb	r2, r2
 8000a10:	440b      	add	r3, r1
 8000a12:	761a      	strb	r2, [r3, #24]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000e100 	.word	0xe000e100
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b089      	sub	sp, #36	; 0x24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	f1c3 0307 	rsb	r3, r3, #7
 8000a42:	2b04      	cmp	r3, #4
 8000a44:	bf28      	it	cs
 8000a46:	2304      	movcs	r3, #4
 8000a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	2b06      	cmp	r3, #6
 8000a50:	d902      	bls.n	8000a58 <NVIC_EncodePriority+0x30>
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3b03      	subs	r3, #3
 8000a56:	e000      	b.n	8000a5a <NVIC_EncodePriority+0x32>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43da      	mvns	r2, r3
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a70:	f04f 31ff 	mov.w	r1, #4294967295
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7a:	43d9      	mvns	r1, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	4313      	orrs	r3, r2
         );
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3724      	adds	r7, #36	; 0x24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
	...

08000a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa0:	d301      	bcc.n	8000aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00f      	b.n	8000ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <SysTick_Config+0x40>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aae:	210f      	movs	r1, #15
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f7ff ff8e 	bl	80009d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <SysTick_Config+0x40>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <SysTick_Config+0x40>)
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	e000e010 	.word	0xe000e010

08000ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ff47 	bl	8000970 <__NVIC_SetPriorityGrouping>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000afc:	f7ff ff5c 	bl	80009b8 <__NVIC_GetPriorityGrouping>
 8000b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	68b9      	ldr	r1, [r7, #8]
 8000b06:	6978      	ldr	r0, [r7, #20]
 8000b08:	f7ff ff8e 	bl	8000a28 <NVIC_EncodePriority>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff5d 	bl	80009d4 <__NVIC_SetPriority>
}
 8000b1a:	bf00      	nop
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff ffb0 	bl	8000a90 <SysTick_Config>
 8000b30:	4603      	mov	r3, r0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
 8000b56:	e16b      	b.n	8000e30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b58:	2201      	movs	r2, #1
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	697a      	ldr	r2, [r7, #20]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	f040 815a 	bne.w	8000e2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 0303 	and.w	r3, r3, #3
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d005      	beq.n	8000b8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d130      	bne.n	8000bf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	2203      	movs	r2, #3
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	68da      	ldr	r2, [r3, #12]
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	091b      	lsrs	r3, r3, #4
 8000bda:	f003 0201 	and.w	r2, r3, #1
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0303 	and.w	r3, r3, #3
 8000bf8:	2b03      	cmp	r3, #3
 8000bfa:	d017      	beq.n	8000c2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	2203      	movs	r2, #3
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4013      	ands	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d123      	bne.n	8000c80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	08da      	lsrs	r2, r3, #3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3208      	adds	r2, #8
 8000c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	f003 0307 	and.w	r3, r3, #7
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	220f      	movs	r2, #15
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	691a      	ldr	r2, [r3, #16]
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	08da      	lsrs	r2, r3, #3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3208      	adds	r2, #8
 8000c7a:	69b9      	ldr	r1, [r7, #24]
 8000c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 0203 	and.w	r2, r3, #3
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f000 80b4 	beq.w	8000e2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b60      	ldr	r3, [pc, #384]	; (8000e48 <HAL_GPIO_Init+0x30c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	4a5f      	ldr	r2, [pc, #380]	; (8000e48 <HAL_GPIO_Init+0x30c>)
 8000ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd2:	4b5d      	ldr	r3, [pc, #372]	; (8000e48 <HAL_GPIO_Init+0x30c>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cde:	4a5b      	ldr	r2, [pc, #364]	; (8000e4c <HAL_GPIO_Init+0x310>)
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	220f      	movs	r2, #15
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a52      	ldr	r2, [pc, #328]	; (8000e50 <HAL_GPIO_Init+0x314>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d02b      	beq.n	8000d62 <HAL_GPIO_Init+0x226>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a51      	ldr	r2, [pc, #324]	; (8000e54 <HAL_GPIO_Init+0x318>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d025      	beq.n	8000d5e <HAL_GPIO_Init+0x222>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a50      	ldr	r2, [pc, #320]	; (8000e58 <HAL_GPIO_Init+0x31c>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d01f      	beq.n	8000d5a <HAL_GPIO_Init+0x21e>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a4f      	ldr	r2, [pc, #316]	; (8000e5c <HAL_GPIO_Init+0x320>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d019      	beq.n	8000d56 <HAL_GPIO_Init+0x21a>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a4e      	ldr	r2, [pc, #312]	; (8000e60 <HAL_GPIO_Init+0x324>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d013      	beq.n	8000d52 <HAL_GPIO_Init+0x216>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a4d      	ldr	r2, [pc, #308]	; (8000e64 <HAL_GPIO_Init+0x328>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d00d      	beq.n	8000d4e <HAL_GPIO_Init+0x212>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a4c      	ldr	r2, [pc, #304]	; (8000e68 <HAL_GPIO_Init+0x32c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d007      	beq.n	8000d4a <HAL_GPIO_Init+0x20e>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a4b      	ldr	r2, [pc, #300]	; (8000e6c <HAL_GPIO_Init+0x330>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d101      	bne.n	8000d46 <HAL_GPIO_Init+0x20a>
 8000d42:	2307      	movs	r3, #7
 8000d44:	e00e      	b.n	8000d64 <HAL_GPIO_Init+0x228>
 8000d46:	2308      	movs	r3, #8
 8000d48:	e00c      	b.n	8000d64 <HAL_GPIO_Init+0x228>
 8000d4a:	2306      	movs	r3, #6
 8000d4c:	e00a      	b.n	8000d64 <HAL_GPIO_Init+0x228>
 8000d4e:	2305      	movs	r3, #5
 8000d50:	e008      	b.n	8000d64 <HAL_GPIO_Init+0x228>
 8000d52:	2304      	movs	r3, #4
 8000d54:	e006      	b.n	8000d64 <HAL_GPIO_Init+0x228>
 8000d56:	2303      	movs	r3, #3
 8000d58:	e004      	b.n	8000d64 <HAL_GPIO_Init+0x228>
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	e002      	b.n	8000d64 <HAL_GPIO_Init+0x228>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e000      	b.n	8000d64 <HAL_GPIO_Init+0x228>
 8000d62:	2300      	movs	r3, #0
 8000d64:	69fa      	ldr	r2, [r7, #28]
 8000d66:	f002 0203 	and.w	r2, r2, #3
 8000d6a:	0092      	lsls	r2, r2, #2
 8000d6c:	4093      	lsls	r3, r2
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d74:	4935      	ldr	r1, [pc, #212]	; (8000e4c <HAL_GPIO_Init+0x310>)
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d82:	4b3b      	ldr	r3, [pc, #236]	; (8000e70 <HAL_GPIO_Init+0x334>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000da6:	4a32      	ldr	r2, [pc, #200]	; (8000e70 <HAL_GPIO_Init+0x334>)
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dac:	4b30      	ldr	r3, [pc, #192]	; (8000e70 <HAL_GPIO_Init+0x334>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dd0:	4a27      	ldr	r2, [pc, #156]	; (8000e70 <HAL_GPIO_Init+0x334>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dd6:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <HAL_GPIO_Init+0x334>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dfa:	4a1d      	ldr	r2, [pc, #116]	; (8000e70 <HAL_GPIO_Init+0x334>)
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <HAL_GPIO_Init+0x334>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e24:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <HAL_GPIO_Init+0x334>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	61fb      	str	r3, [r7, #28]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	2b0f      	cmp	r3, #15
 8000e34:	f67f ae90 	bls.w	8000b58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40013800 	.word	0x40013800
 8000e50:	40020000 	.word	0x40020000
 8000e54:	40020400 	.word	0x40020400
 8000e58:	40020800 	.word	0x40020800
 8000e5c:	40020c00 	.word	0x40020c00
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40021400 	.word	0x40021400
 8000e68:	40021800 	.word	0x40021800
 8000e6c:	40021c00 	.word	0x40021c00
 8000e70:	40013c00 	.word	0x40013c00

08000e74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	691a      	ldr	r2, [r3, #16]
 8000e84:	887b      	ldrh	r3, [r7, #2]
 8000e86:	4013      	ands	r3, r2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d002      	beq.n	8000e92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
 8000e90:	e001      	b.n	8000e96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eb4:	787b      	ldrb	r3, [r7, #1]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eba:	887a      	ldrh	r2, [r7, #2]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ec0:	e003      	b.n	8000eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ec2:	887b      	ldrh	r3, [r7, #2]
 8000ec4:	041a      	lsls	r2, r3, #16
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	619a      	str	r2, [r3, #24]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b085      	sub	sp, #20
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ee8:	887a      	ldrh	r2, [r7, #2]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4013      	ands	r3, r2
 8000eee:	041a      	lsls	r2, r3, #16
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	400b      	ands	r3, r1
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	619a      	str	r2, [r3, #24]
}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e267      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d075      	beq.n	8001016 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f2a:	4b88      	ldr	r3, [pc, #544]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 030c 	and.w	r3, r3, #12
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	d00c      	beq.n	8000f50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f36:	4b85      	ldr	r3, [pc, #532]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f3e:	2b08      	cmp	r3, #8
 8000f40:	d112      	bne.n	8000f68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f42:	4b82      	ldr	r3, [pc, #520]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f4e:	d10b      	bne.n	8000f68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f50:	4b7e      	ldr	r3, [pc, #504]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d05b      	beq.n	8001014 <HAL_RCC_OscConfig+0x108>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d157      	bne.n	8001014 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e242      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f70:	d106      	bne.n	8000f80 <HAL_RCC_OscConfig+0x74>
 8000f72:	4b76      	ldr	r3, [pc, #472]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a75      	ldr	r2, [pc, #468]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8000f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e01d      	b.n	8000fbc <HAL_RCC_OscConfig+0xb0>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f88:	d10c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x98>
 8000f8a:	4b70      	ldr	r3, [pc, #448]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a6f      	ldr	r2, [pc, #444]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8000f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	4b6d      	ldr	r3, [pc, #436]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a6c      	ldr	r2, [pc, #432]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8000f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e00b      	b.n	8000fbc <HAL_RCC_OscConfig+0xb0>
 8000fa4:	4b69      	ldr	r3, [pc, #420]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a68      	ldr	r2, [pc, #416]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8000faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b66      	ldr	r3, [pc, #408]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a65      	ldr	r2, [pc, #404]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8000fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d013      	beq.n	8000fec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fca4 	bl	8000910 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fca0 	bl	8000910 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b64      	cmp	r3, #100	; 0x64
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e207      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fde:	4b5b      	ldr	r3, [pc, #364]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0xc0>
 8000fea:	e014      	b.n	8001016 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fc90 	bl	8000910 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fc8c 	bl	8000910 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	; 0x64
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e1f3      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001006:	4b51      	ldr	r3, [pc, #324]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f0      	bne.n	8000ff4 <HAL_RCC_OscConfig+0xe8>
 8001012:	e000      	b.n	8001016 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d063      	beq.n	80010ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001022:	4b4a      	ldr	r3, [pc, #296]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 030c 	and.w	r3, r3, #12
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00b      	beq.n	8001046 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800102e:	4b47      	ldr	r3, [pc, #284]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001036:	2b08      	cmp	r3, #8
 8001038:	d11c      	bne.n	8001074 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800103a:	4b44      	ldr	r3, [pc, #272]	; (800114c <HAL_RCC_OscConfig+0x240>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d116      	bne.n	8001074 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001046:	4b41      	ldr	r3, [pc, #260]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d005      	beq.n	800105e <HAL_RCC_OscConfig+0x152>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d001      	beq.n	800105e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e1c7      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105e:	4b3b      	ldr	r3, [pc, #236]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4937      	ldr	r1, [pc, #220]	; (800114c <HAL_RCC_OscConfig+0x240>)
 800106e:	4313      	orrs	r3, r2
 8001070:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001072:	e03a      	b.n	80010ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d020      	beq.n	80010be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800107c:	4b34      	ldr	r3, [pc, #208]	; (8001150 <HAL_RCC_OscConfig+0x244>)
 800107e:	2201      	movs	r2, #1
 8001080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001082:	f7ff fc45 	bl	8000910 <HAL_GetTick>
 8001086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001088:	e008      	b.n	800109c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800108a:	f7ff fc41 	bl	8000910 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e1a8      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109c:	4b2b      	ldr	r3, [pc, #172]	; (800114c <HAL_RCC_OscConfig+0x240>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0f0      	beq.n	800108a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a8:	4b28      	ldr	r3, [pc, #160]	; (800114c <HAL_RCC_OscConfig+0x240>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	4925      	ldr	r1, [pc, #148]	; (800114c <HAL_RCC_OscConfig+0x240>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	600b      	str	r3, [r1, #0]
 80010bc:	e015      	b.n	80010ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010be:	4b24      	ldr	r3, [pc, #144]	; (8001150 <HAL_RCC_OscConfig+0x244>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c4:	f7ff fc24 	bl	8000910 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010cc:	f7ff fc20 	bl	8000910 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e187      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_RCC_OscConfig+0x240>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f0      	bne.n	80010cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d036      	beq.n	8001164 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d016      	beq.n	800112c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_RCC_OscConfig+0x248>)
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001104:	f7ff fc04 	bl	8000910 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800110c:	f7ff fc00 	bl	8000910 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e167      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_RCC_OscConfig+0x240>)
 8001120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0f0      	beq.n	800110c <HAL_RCC_OscConfig+0x200>
 800112a:	e01b      	b.n	8001164 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_RCC_OscConfig+0x248>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001132:	f7ff fbed 	bl	8000910 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001138:	e00e      	b.n	8001158 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800113a:	f7ff fbe9 	bl	8000910 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d907      	bls.n	8001158 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e150      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
 800114c:	40023800 	.word	0x40023800
 8001150:	42470000 	.word	0x42470000
 8001154:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001158:	4b88      	ldr	r3, [pc, #544]	; (800137c <HAL_RCC_OscConfig+0x470>)
 800115a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1ea      	bne.n	800113a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 8097 	beq.w	80012a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001176:	4b81      	ldr	r3, [pc, #516]	; (800137c <HAL_RCC_OscConfig+0x470>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10f      	bne.n	80011a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	4b7d      	ldr	r3, [pc, #500]	; (800137c <HAL_RCC_OscConfig+0x470>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	4a7c      	ldr	r2, [pc, #496]	; (800137c <HAL_RCC_OscConfig+0x470>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
 8001192:	4b7a      	ldr	r3, [pc, #488]	; (800137c <HAL_RCC_OscConfig+0x470>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800119e:	2301      	movs	r3, #1
 80011a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a2:	4b77      	ldr	r3, [pc, #476]	; (8001380 <HAL_RCC_OscConfig+0x474>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d118      	bne.n	80011e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ae:	4b74      	ldr	r3, [pc, #464]	; (8001380 <HAL_RCC_OscConfig+0x474>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a73      	ldr	r2, [pc, #460]	; (8001380 <HAL_RCC_OscConfig+0x474>)
 80011b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ba:	f7ff fba9 	bl	8000910 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c2:	f7ff fba5 	bl	8000910 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e10c      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d4:	4b6a      	ldr	r3, [pc, #424]	; (8001380 <HAL_RCC_OscConfig+0x474>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d106      	bne.n	80011f6 <HAL_RCC_OscConfig+0x2ea>
 80011e8:	4b64      	ldr	r3, [pc, #400]	; (800137c <HAL_RCC_OscConfig+0x470>)
 80011ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ec:	4a63      	ldr	r2, [pc, #396]	; (800137c <HAL_RCC_OscConfig+0x470>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6713      	str	r3, [r2, #112]	; 0x70
 80011f4:	e01c      	b.n	8001230 <HAL_RCC_OscConfig+0x324>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0x30c>
 80011fe:	4b5f      	ldr	r3, [pc, #380]	; (800137c <HAL_RCC_OscConfig+0x470>)
 8001200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001202:	4a5e      	ldr	r2, [pc, #376]	; (800137c <HAL_RCC_OscConfig+0x470>)
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	6713      	str	r3, [r2, #112]	; 0x70
 800120a:	4b5c      	ldr	r3, [pc, #368]	; (800137c <HAL_RCC_OscConfig+0x470>)
 800120c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800120e:	4a5b      	ldr	r2, [pc, #364]	; (800137c <HAL_RCC_OscConfig+0x470>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6713      	str	r3, [r2, #112]	; 0x70
 8001216:	e00b      	b.n	8001230 <HAL_RCC_OscConfig+0x324>
 8001218:	4b58      	ldr	r3, [pc, #352]	; (800137c <HAL_RCC_OscConfig+0x470>)
 800121a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800121c:	4a57      	ldr	r2, [pc, #348]	; (800137c <HAL_RCC_OscConfig+0x470>)
 800121e:	f023 0301 	bic.w	r3, r3, #1
 8001222:	6713      	str	r3, [r2, #112]	; 0x70
 8001224:	4b55      	ldr	r3, [pc, #340]	; (800137c <HAL_RCC_OscConfig+0x470>)
 8001226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001228:	4a54      	ldr	r2, [pc, #336]	; (800137c <HAL_RCC_OscConfig+0x470>)
 800122a:	f023 0304 	bic.w	r3, r3, #4
 800122e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d015      	beq.n	8001264 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001238:	f7ff fb6a 	bl	8000910 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123e:	e00a      	b.n	8001256 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001240:	f7ff fb66 	bl	8000910 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	f241 3288 	movw	r2, #5000	; 0x1388
 800124e:	4293      	cmp	r3, r2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e0cb      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001256:	4b49      	ldr	r3, [pc, #292]	; (800137c <HAL_RCC_OscConfig+0x470>)
 8001258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0ee      	beq.n	8001240 <HAL_RCC_OscConfig+0x334>
 8001262:	e014      	b.n	800128e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001264:	f7ff fb54 	bl	8000910 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126a:	e00a      	b.n	8001282 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800126c:	f7ff fb50 	bl	8000910 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f241 3288 	movw	r2, #5000	; 0x1388
 800127a:	4293      	cmp	r3, r2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e0b5      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001282:	4b3e      	ldr	r3, [pc, #248]	; (800137c <HAL_RCC_OscConfig+0x470>)
 8001284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1ee      	bne.n	800126c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800128e:	7dfb      	ldrb	r3, [r7, #23]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d105      	bne.n	80012a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001294:	4b39      	ldr	r3, [pc, #228]	; (800137c <HAL_RCC_OscConfig+0x470>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	4a38      	ldr	r2, [pc, #224]	; (800137c <HAL_RCC_OscConfig+0x470>)
 800129a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800129e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80a1 	beq.w	80013ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012aa:	4b34      	ldr	r3, [pc, #208]	; (800137c <HAL_RCC_OscConfig+0x470>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d05c      	beq.n	8001370 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d141      	bne.n	8001342 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012be:	4b31      	ldr	r3, [pc, #196]	; (8001384 <HAL_RCC_OscConfig+0x478>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fb24 	bl	8000910 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012cc:	f7ff fb20 	bl	8000910 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e087      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012de:	4b27      	ldr	r3, [pc, #156]	; (800137c <HAL_RCC_OscConfig+0x470>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69da      	ldr	r2, [r3, #28]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	019b      	lsls	r3, r3, #6
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	085b      	lsrs	r3, r3, #1
 8001302:	3b01      	subs	r3, #1
 8001304:	041b      	lsls	r3, r3, #16
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	061b      	lsls	r3, r3, #24
 800130e:	491b      	ldr	r1, [pc, #108]	; (800137c <HAL_RCC_OscConfig+0x470>)
 8001310:	4313      	orrs	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <HAL_RCC_OscConfig+0x478>)
 8001316:	2201      	movs	r2, #1
 8001318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff faf9 	bl	8000910 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001322:	f7ff faf5 	bl	8000910 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e05c      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_RCC_OscConfig+0x470>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x416>
 8001340:	e054      	b.n	80013ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_RCC_OscConfig+0x478>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fae2 	bl	8000910 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001350:	f7ff fade 	bl	8000910 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e045      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_RCC_OscConfig+0x470>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x444>
 800136e:	e03d      	b.n	80013ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d107      	bne.n	8001388 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e038      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
 800137c:	40023800 	.word	0x40023800
 8001380:	40007000 	.word	0x40007000
 8001384:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <HAL_RCC_OscConfig+0x4ec>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d028      	beq.n	80013e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d121      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d11a      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013b8:	4013      	ands	r3, r2
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d111      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ce:	085b      	lsrs	r3, r3, #1
 80013d0:	3b01      	subs	r3, #1
 80013d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d107      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d001      	beq.n	80013ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e000      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0cc      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001410:	4b68      	ldr	r3, [pc, #416]	; (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d90c      	bls.n	8001438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141e:	4b65      	ldr	r3, [pc, #404]	; (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001426:	4b63      	ldr	r3, [pc, #396]	; (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d001      	beq.n	8001438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0b8      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d020      	beq.n	8001486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001450:	4b59      	ldr	r3, [pc, #356]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	4a58      	ldr	r2, [pc, #352]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800145a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001468:	4b53      	ldr	r3, [pc, #332]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	4a52      	ldr	r2, [pc, #328]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001474:	4b50      	ldr	r3, [pc, #320]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	494d      	ldr	r1, [pc, #308]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	4313      	orrs	r3, r2
 8001484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d044      	beq.n	800151c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d107      	bne.n	80014aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149a:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d119      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e07f      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d003      	beq.n	80014ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d107      	bne.n	80014ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ba:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d109      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e06f      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e067      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014da:	4b37      	ldr	r3, [pc, #220]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f023 0203 	bic.w	r2, r3, #3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4934      	ldr	r1, [pc, #208]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014ec:	f7ff fa10 	bl	8000910 <HAL_GetTick>
 80014f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f2:	e00a      	b.n	800150a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f4:	f7ff fa0c 	bl	8000910 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e04f      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150a:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 020c 	and.w	r2, r3, #12
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	429a      	cmp	r2, r3
 800151a:	d1eb      	bne.n	80014f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800151c:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d20c      	bcs.n	8001544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d001      	beq.n	8001544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e032      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	4916      	ldr	r1, [pc, #88]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	4313      	orrs	r3, r2
 8001560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d009      	beq.n	8001582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	490e      	ldr	r1, [pc, #56]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	4313      	orrs	r3, r2
 8001580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001582:	f000 f821 	bl	80015c8 <HAL_RCC_GetSysClockFreq>
 8001586:	4602      	mov	r2, r0
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	490a      	ldr	r1, [pc, #40]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001594:	5ccb      	ldrb	r3, [r1, r3]
 8001596:	fa22 f303 	lsr.w	r3, r2, r3
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800159c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff f970 	bl	8000888 <HAL_InitTick>

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023c00 	.word	0x40023c00
 80015b8:	40023800 	.word	0x40023800
 80015bc:	08002b34 	.word	0x08002b34
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000004 	.word	0x20000004

080015c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015cc:	b090      	sub	sp, #64	; 0x40
 80015ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	637b      	str	r3, [r7, #52]	; 0x34
 80015d4:	2300      	movs	r3, #0
 80015d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015d8:	2300      	movs	r3, #0
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015e0:	4b59      	ldr	r3, [pc, #356]	; (8001748 <HAL_RCC_GetSysClockFreq+0x180>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d00d      	beq.n	8001608 <HAL_RCC_GetSysClockFreq+0x40>
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	f200 80a1 	bhi.w	8001734 <HAL_RCC_GetSysClockFreq+0x16c>
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <HAL_RCC_GetSysClockFreq+0x34>
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d003      	beq.n	8001602 <HAL_RCC_GetSysClockFreq+0x3a>
 80015fa:	e09b      	b.n	8001734 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015fc:	4b53      	ldr	r3, [pc, #332]	; (800174c <HAL_RCC_GetSysClockFreq+0x184>)
 80015fe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001600:	e09b      	b.n	800173a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001602:	4b53      	ldr	r3, [pc, #332]	; (8001750 <HAL_RCC_GetSysClockFreq+0x188>)
 8001604:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001606:	e098      	b.n	800173a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001608:	4b4f      	ldr	r3, [pc, #316]	; (8001748 <HAL_RCC_GetSysClockFreq+0x180>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001612:	4b4d      	ldr	r3, [pc, #308]	; (8001748 <HAL_RCC_GetSysClockFreq+0x180>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d028      	beq.n	8001670 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800161e:	4b4a      	ldr	r3, [pc, #296]	; (8001748 <HAL_RCC_GetSysClockFreq+0x180>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	099b      	lsrs	r3, r3, #6
 8001624:	2200      	movs	r2, #0
 8001626:	623b      	str	r3, [r7, #32]
 8001628:	627a      	str	r2, [r7, #36]	; 0x24
 800162a:	6a3b      	ldr	r3, [r7, #32]
 800162c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001630:	2100      	movs	r1, #0
 8001632:	4b47      	ldr	r3, [pc, #284]	; (8001750 <HAL_RCC_GetSysClockFreq+0x188>)
 8001634:	fb03 f201 	mul.w	r2, r3, r1
 8001638:	2300      	movs	r3, #0
 800163a:	fb00 f303 	mul.w	r3, r0, r3
 800163e:	4413      	add	r3, r2
 8001640:	4a43      	ldr	r2, [pc, #268]	; (8001750 <HAL_RCC_GetSysClockFreq+0x188>)
 8001642:	fba0 1202 	umull	r1, r2, r0, r2
 8001646:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001648:	460a      	mov	r2, r1
 800164a:	62ba      	str	r2, [r7, #40]	; 0x28
 800164c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800164e:	4413      	add	r3, r2
 8001650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001654:	2200      	movs	r2, #0
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	61fa      	str	r2, [r7, #28]
 800165a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800165e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001662:	f7fe fdb5 	bl	80001d0 <__aeabi_uldivmod>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4613      	mov	r3, r2
 800166c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800166e:	e053      	b.n	8001718 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001670:	4b35      	ldr	r3, [pc, #212]	; (8001748 <HAL_RCC_GetSysClockFreq+0x180>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	099b      	lsrs	r3, r3, #6
 8001676:	2200      	movs	r2, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	617a      	str	r2, [r7, #20]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001682:	f04f 0b00 	mov.w	fp, #0
 8001686:	4652      	mov	r2, sl
 8001688:	465b      	mov	r3, fp
 800168a:	f04f 0000 	mov.w	r0, #0
 800168e:	f04f 0100 	mov.w	r1, #0
 8001692:	0159      	lsls	r1, r3, #5
 8001694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001698:	0150      	lsls	r0, r2, #5
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	ebb2 080a 	subs.w	r8, r2, sl
 80016a2:	eb63 090b 	sbc.w	r9, r3, fp
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80016b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80016b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80016ba:	ebb2 0408 	subs.w	r4, r2, r8
 80016be:	eb63 0509 	sbc.w	r5, r3, r9
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	00eb      	lsls	r3, r5, #3
 80016cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016d0:	00e2      	lsls	r2, r4, #3
 80016d2:	4614      	mov	r4, r2
 80016d4:	461d      	mov	r5, r3
 80016d6:	eb14 030a 	adds.w	r3, r4, sl
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	eb45 030b 	adc.w	r3, r5, fp
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016ee:	4629      	mov	r1, r5
 80016f0:	028b      	lsls	r3, r1, #10
 80016f2:	4621      	mov	r1, r4
 80016f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016f8:	4621      	mov	r1, r4
 80016fa:	028a      	lsls	r2, r1, #10
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001702:	2200      	movs	r2, #0
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	60fa      	str	r2, [r7, #12]
 8001708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800170c:	f7fe fd60 	bl	80001d0 <__aeabi_uldivmod>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4613      	mov	r3, r2
 8001716:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_GetSysClockFreq+0x180>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	0c1b      	lsrs	r3, r3, #16
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	3301      	adds	r3, #1
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001728:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800172a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800172c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001730:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001732:	e002      	b.n	800173a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_RCC_GetSysClockFreq+0x184>)
 8001736:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800173a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800173c:	4618      	mov	r0, r3
 800173e:	3740      	adds	r7, #64	; 0x40
 8001740:	46bd      	mov	sp, r7
 8001742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	00f42400 	.word	0x00f42400
 8001750:	017d7840 	.word	0x017d7840

08001754 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f103 0208 	add.w	r2, r3, #8
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f103 0208 	add.w	r2, r3, #8
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f103 0208 	add.w	r2, r3, #8
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	601a      	str	r2, [r3, #0]
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6892      	ldr	r2, [r2, #8]
 800180c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6852      	ldr	r2, [r2, #4]
 8001816:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	429a      	cmp	r2, r3
 8001820:	d103      	bne.n	800182a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	1e5a      	subs	r2, r3, #1
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800184a:	b580      	push	{r7, lr}
 800184c:	b08e      	sub	sp, #56	; 0x38
 800184e:	af04      	add	r7, sp, #16
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10a      	bne.n	8001874 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800185e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001862:	f383 8811 	msr	BASEPRI, r3
 8001866:	f3bf 8f6f 	isb	sy
 800186a:	f3bf 8f4f 	dsb	sy
 800186e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001870:	bf00      	nop
 8001872:	e7fe      	b.n	8001872 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10a      	bne.n	8001890 <xTaskCreateStatic+0x46>
	__asm volatile
 800187a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800187e:	f383 8811 	msr	BASEPRI, r3
 8001882:	f3bf 8f6f 	isb	sy
 8001886:	f3bf 8f4f 	dsb	sy
 800188a:	61fb      	str	r3, [r7, #28]
}
 800188c:	bf00      	nop
 800188e:	e7fe      	b.n	800188e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001890:	2354      	movs	r3, #84	; 0x54
 8001892:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	2b54      	cmp	r3, #84	; 0x54
 8001898:	d00a      	beq.n	80018b0 <xTaskCreateStatic+0x66>
	__asm volatile
 800189a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800189e:	f383 8811 	msr	BASEPRI, r3
 80018a2:	f3bf 8f6f 	isb	sy
 80018a6:	f3bf 8f4f 	dsb	sy
 80018aa:	61bb      	str	r3, [r7, #24]
}
 80018ac:	bf00      	nop
 80018ae:	e7fe      	b.n	80018ae <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80018b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80018b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d01e      	beq.n	80018f6 <xTaskCreateStatic+0xac>
 80018b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d01b      	beq.n	80018f6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80018be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018c6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	2202      	movs	r2, #2
 80018cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80018d0:	2300      	movs	r3, #0
 80018d2:	9303      	str	r3, [sp, #12]
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	9302      	str	r3, [sp, #8]
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	68b9      	ldr	r1, [r7, #8]
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 f850 	bl	800198e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80018ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018f0:	f000 f8d4 	bl	8001a9c <prvAddNewTaskToReadyList>
 80018f4:	e001      	b.n	80018fa <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80018fa:	697b      	ldr	r3, [r7, #20]
	}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3728      	adds	r7, #40	; 0x28
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08c      	sub	sp, #48	; 0x30
 8001908:	af04      	add	r7, sp, #16
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	4613      	mov	r3, r2
 8001912:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4618      	mov	r0, r3
 800191a:	f000 fedd 	bl	80026d8 <pvPortMalloc>
 800191e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00e      	beq.n	8001944 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001926:	2054      	movs	r0, #84	; 0x54
 8001928:	f000 fed6 	bl	80026d8 <pvPortMalloc>
 800192c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	631a      	str	r2, [r3, #48]	; 0x30
 800193a:	e005      	b.n	8001948 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800193c:	6978      	ldr	r0, [r7, #20]
 800193e:	f000 ff97 	bl	8002870 <vPortFree>
 8001942:	e001      	b.n	8001948 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d017      	beq.n	800197e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001956:	88fa      	ldrh	r2, [r7, #6]
 8001958:	2300      	movs	r3, #0
 800195a:	9303      	str	r3, [sp, #12]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	9302      	str	r3, [sp, #8]
 8001960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68b9      	ldr	r1, [r7, #8]
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 f80e 	bl	800198e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001972:	69f8      	ldr	r0, [r7, #28]
 8001974:	f000 f892 	bl	8001a9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001978:	2301      	movs	r3, #1
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	e002      	b.n	8001984 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001984:	69bb      	ldr	r3, [r7, #24]
	}
 8001986:	4618      	mov	r0, r3
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b088      	sub	sp, #32
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800199c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019a6:	3b01      	subs	r3, #1
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	f023 0307 	bic.w	r3, r3, #7
 80019b4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00a      	beq.n	80019d6 <prvInitialiseNewTask+0x48>
	__asm volatile
 80019c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c4:	f383 8811 	msr	BASEPRI, r3
 80019c8:	f3bf 8f6f 	isb	sy
 80019cc:	f3bf 8f4f 	dsb	sy
 80019d0:	617b      	str	r3, [r7, #20]
}
 80019d2:	bf00      	nop
 80019d4:	e7fe      	b.n	80019d4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d01f      	beq.n	8001a1c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	e012      	b.n	8001a08 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	4413      	add	r3, r2
 80019e8:	7819      	ldrb	r1, [r3, #0]
 80019ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	4413      	add	r3, r2
 80019f0:	3334      	adds	r3, #52	; 0x34
 80019f2:	460a      	mov	r2, r1
 80019f4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	4413      	add	r3, r2
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d006      	beq.n	8001a10 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3301      	adds	r3, #1
 8001a06:	61fb      	str	r3, [r7, #28]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	2b0f      	cmp	r3, #15
 8001a0c:	d9e9      	bls.n	80019e2 <prvInitialiseNewTask+0x54>
 8001a0e:	e000      	b.n	8001a12 <prvInitialiseNewTask+0x84>
			{
				break;
 8001a10:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a1a:	e003      	b.n	8001a24 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d901      	bls.n	8001a2e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a38:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a42:	3304      	adds	r3, #4
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fea5 	bl	8001794 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4c:	3318      	adds	r3, #24
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fea0 	bl	8001794 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5c:	f1c3 0207 	rsb	r2, r3, #7
 8001a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	68f9      	ldr	r1, [r7, #12]
 8001a7c:	69b8      	ldr	r0, [r7, #24]
 8001a7e:	f000 fc19 	bl	80022b4 <pxPortInitialiseStack>
 8001a82:	4602      	mov	r2, r0
 8001a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001a94:	bf00      	nop
 8001a96:	3720      	adds	r7, #32
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001aa4:	f000 fd36 	bl	8002514 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <prvAddNewTaskToReadyList+0xb8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	3301      	adds	r3, #1
 8001aae:	4a29      	ldr	r2, [pc, #164]	; (8001b54 <prvAddNewTaskToReadyList+0xb8>)
 8001ab0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001ab2:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <prvAddNewTaskToReadyList+0xbc>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001aba:	4a27      	ldr	r2, [pc, #156]	; (8001b58 <prvAddNewTaskToReadyList+0xbc>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ac0:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <prvAddNewTaskToReadyList+0xb8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d110      	bne.n	8001aea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001ac8:	f000 fb18 	bl	80020fc <prvInitialiseTaskLists>
 8001acc:	e00d      	b.n	8001aea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001ace:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <prvAddNewTaskToReadyList+0xc0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <prvAddNewTaskToReadyList+0xbc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d802      	bhi.n	8001aea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001ae4:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <prvAddNewTaskToReadyList+0xbc>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <prvAddNewTaskToReadyList+0xc4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3301      	adds	r3, #1
 8001af0:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <prvAddNewTaskToReadyList+0xc4>)
 8001af2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	2201      	movs	r2, #1
 8001afa:	409a      	lsls	r2, r3
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <prvAddNewTaskToReadyList+0xc8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <prvAddNewTaskToReadyList+0xc8>)
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4a15      	ldr	r2, [pc, #84]	; (8001b68 <prvAddNewTaskToReadyList+0xcc>)
 8001b14:	441a      	add	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	f7ff fe46 	bl	80017ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001b22:	f000 fd27 	bl	8002574 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <prvAddNewTaskToReadyList+0xc0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00e      	beq.n	8001b4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <prvAddNewTaskToReadyList+0xbc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d207      	bcs.n	8001b4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <prvAddNewTaskToReadyList+0xd0>)
 8001b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	f3bf 8f4f 	dsb	sy
 8001b48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	2000038c 	.word	0x2000038c
 8001b58:	2000028c 	.word	0x2000028c
 8001b5c:	20000398 	.word	0x20000398
 8001b60:	200003a8 	.word	0x200003a8
 8001b64:	20000394 	.word	0x20000394
 8001b68:	20000290 	.word	0x20000290
 8001b6c:	e000ed04 	.word	0xe000ed04

08001b70 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001b78:	f000 fccc 	bl	8002514 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d102      	bne.n	8001b88 <vTaskDelete+0x18>
 8001b82:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <vTaskDelete+0xf8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	e000      	b.n	8001b8a <vTaskDelete+0x1a>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fe30 	bl	80017f6 <uxListRemove>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d115      	bne.n	8001bc8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba0:	4932      	ldr	r1, [pc, #200]	; (8001c6c <vTaskDelete+0xfc>)
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10a      	bne.n	8001bc8 <vTaskDelete+0x58>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43da      	mvns	r2, r3
 8001bbe:	4b2c      	ldr	r3, [pc, #176]	; (8001c70 <vTaskDelete+0x100>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	4a2a      	ldr	r2, [pc, #168]	; (8001c70 <vTaskDelete+0x100>)
 8001bc6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d004      	beq.n	8001bda <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3318      	adds	r3, #24
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fe0e 	bl	80017f6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <vTaskDelete+0x104>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	4a24      	ldr	r2, [pc, #144]	; (8001c74 <vTaskDelete+0x104>)
 8001be2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8001be4:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <vTaskDelete+0xf8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d10b      	bne.n	8001c06 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4820      	ldr	r0, [pc, #128]	; (8001c78 <vTaskDelete+0x108>)
 8001bf6:	f7ff fdda 	bl	80017ae <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <vTaskDelete+0x10c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	4a1e      	ldr	r2, [pc, #120]	; (8001c7c <vTaskDelete+0x10c>)
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	e009      	b.n	8001c1a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <vTaskDelete+0x110>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <vTaskDelete+0x110>)
 8001c0e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 fae1 	bl	80021d8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8001c16:	f000 fb0f 	bl	8002238 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8001c1a:	f000 fcab 	bl	8002574 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8001c1e:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <vTaskDelete+0x114>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d01b      	beq.n	8001c5e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <vTaskDelete+0xf8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d116      	bne.n	8001c5e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8001c30:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <vTaskDelete+0x118>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00a      	beq.n	8001c4e <vTaskDelete+0xde>
	__asm volatile
 8001c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c3c:	f383 8811 	msr	BASEPRI, r3
 8001c40:	f3bf 8f6f 	isb	sy
 8001c44:	f3bf 8f4f 	dsb	sy
 8001c48:	60bb      	str	r3, [r7, #8]
}
 8001c4a:	bf00      	nop
 8001c4c:	e7fe      	b.n	8001c4c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <vTaskDelete+0x11c>)
 8001c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	f3bf 8f4f 	dsb	sy
 8001c5a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2000028c 	.word	0x2000028c
 8001c6c:	20000290 	.word	0x20000290
 8001c70:	20000394 	.word	0x20000394
 8001c74:	200003a8 	.word	0x200003a8
 8001c78:	20000360 	.word	0x20000360
 8001c7c:	20000374 	.word	0x20000374
 8001c80:	2000038c 	.word	0x2000038c
 8001c84:	20000398 	.word	0x20000398
 8001c88:	200003b4 	.word	0x200003b4
 8001c8c:	e000ed04 	.word	0xe000ed04

08001c90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001c9e:	463a      	mov	r2, r7
 8001ca0:	1d39      	adds	r1, r7, #4
 8001ca2:	f107 0308 	add.w	r3, r7, #8
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fc14 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001cac:	6839      	ldr	r1, [r7, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	9202      	str	r2, [sp, #8]
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	491e      	ldr	r1, [pc, #120]	; (8001d38 <vTaskStartScheduler+0xa8>)
 8001cc0:	481e      	ldr	r0, [pc, #120]	; (8001d3c <vTaskStartScheduler+0xac>)
 8001cc2:	f7ff fdc2 	bl	800184a <xTaskCreateStatic>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <vTaskStartScheduler+0xb0>)
 8001cca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <vTaskStartScheduler+0xb0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e001      	b.n	8001cde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d116      	bne.n	8001d12 <vTaskStartScheduler+0x82>
	__asm volatile
 8001ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce8:	f383 8811 	msr	BASEPRI, r3
 8001cec:	f3bf 8f6f 	isb	sy
 8001cf0:	f3bf 8f4f 	dsb	sy
 8001cf4:	613b      	str	r3, [r7, #16]
}
 8001cf6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <vTaskStartScheduler+0xb4>)
 8001cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <vTaskStartScheduler+0xb8>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <vTaskStartScheduler+0xbc>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001d0c:	f000 fb60 	bl	80023d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001d10:	e00e      	b.n	8001d30 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d18:	d10a      	bne.n	8001d30 <vTaskStartScheduler+0xa0>
	__asm volatile
 8001d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1e:	f383 8811 	msr	BASEPRI, r3
 8001d22:	f3bf 8f6f 	isb	sy
 8001d26:	f3bf 8f4f 	dsb	sy
 8001d2a:	60fb      	str	r3, [r7, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	e7fe      	b.n	8001d2e <vTaskStartScheduler+0x9e>
}
 8001d30:	bf00      	nop
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	08002b2c 	.word	0x08002b2c
 8001d3c:	080020cd 	.word	0x080020cd
 8001d40:	200003b0 	.word	0x200003b0
 8001d44:	200003ac 	.word	0x200003ac
 8001d48:	20000398 	.word	0x20000398
 8001d4c:	20000390 	.word	0x20000390

08001d50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <vTaskSuspendAll+0x18>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	4a03      	ldr	r2, [pc, #12]	; (8001d68 <vTaskSuspendAll+0x18>)
 8001d5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	200003b4 	.word	0x200003b4

08001d6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001d7a:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <xTaskResumeAll+0x114>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10a      	bne.n	8001d98 <xTaskResumeAll+0x2c>
	__asm volatile
 8001d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d86:	f383 8811 	msr	BASEPRI, r3
 8001d8a:	f3bf 8f6f 	isb	sy
 8001d8e:	f3bf 8f4f 	dsb	sy
 8001d92:	603b      	str	r3, [r7, #0]
}
 8001d94:	bf00      	nop
 8001d96:	e7fe      	b.n	8001d96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001d98:	f000 fbbc 	bl	8002514 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001d9c:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <xTaskResumeAll+0x114>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	4a37      	ldr	r2, [pc, #220]	; (8001e80 <xTaskResumeAll+0x114>)
 8001da4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001da6:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <xTaskResumeAll+0x114>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d161      	bne.n	8001e72 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001dae:	4b35      	ldr	r3, [pc, #212]	; (8001e84 <xTaskResumeAll+0x118>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d05d      	beq.n	8001e72 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001db6:	e02e      	b.n	8001e16 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001db8:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <xTaskResumeAll+0x11c>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3318      	adds	r3, #24
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fd16 	bl	80017f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fd11 	bl	80017f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	2201      	movs	r2, #1
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <xTaskResumeAll+0x120>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	4a2a      	ldr	r2, [pc, #168]	; (8001e8c <xTaskResumeAll+0x120>)
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4a27      	ldr	r2, [pc, #156]	; (8001e90 <xTaskResumeAll+0x124>)
 8001df4:	441a      	add	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	f7ff fcd6 	bl	80017ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e06:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <xTaskResumeAll+0x128>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d302      	bcc.n	8001e16 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8001e10:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <xTaskResumeAll+0x12c>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e16:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <xTaskResumeAll+0x11c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1cc      	bne.n	8001db8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001e24:	f000 fa08 	bl	8002238 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001e28:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <xTaskResumeAll+0x130>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d010      	beq.n	8001e56 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001e34:	f000 f836 	bl	8001ea4 <xTaskIncrementTick>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <xTaskResumeAll+0x12c>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f1      	bne.n	8001e34 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <xTaskResumeAll+0x130>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <xTaskResumeAll+0x12c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d009      	beq.n	8001e72 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <xTaskResumeAll+0x134>)
 8001e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	f3bf 8f4f 	dsb	sy
 8001e6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001e72:	f000 fb7f 	bl	8002574 <vPortExitCritical>

	return xAlreadyYielded;
 8001e76:	68bb      	ldr	r3, [r7, #8]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200003b4 	.word	0x200003b4
 8001e84:	2000038c 	.word	0x2000038c
 8001e88:	2000034c 	.word	0x2000034c
 8001e8c:	20000394 	.word	0x20000394
 8001e90:	20000290 	.word	0x20000290
 8001e94:	2000028c 	.word	0x2000028c
 8001e98:	200003a0 	.word	0x200003a0
 8001e9c:	2000039c 	.word	0x2000039c
 8001ea0:	e000ed04 	.word	0xe000ed04

08001ea4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001eae:	4b4e      	ldr	r3, [pc, #312]	; (8001fe8 <xTaskIncrementTick+0x144>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 808e 	bne.w	8001fd4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001eb8:	4b4c      	ldr	r3, [pc, #304]	; (8001fec <xTaskIncrementTick+0x148>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001ec0:	4a4a      	ldr	r2, [pc, #296]	; (8001fec <xTaskIncrementTick+0x148>)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d120      	bne.n	8001f0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001ecc:	4b48      	ldr	r3, [pc, #288]	; (8001ff0 <xTaskIncrementTick+0x14c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <xTaskIncrementTick+0x48>
	__asm volatile
 8001ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eda:	f383 8811 	msr	BASEPRI, r3
 8001ede:	f3bf 8f6f 	isb	sy
 8001ee2:	f3bf 8f4f 	dsb	sy
 8001ee6:	603b      	str	r3, [r7, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	e7fe      	b.n	8001eea <xTaskIncrementTick+0x46>
 8001eec:	4b40      	ldr	r3, [pc, #256]	; (8001ff0 <xTaskIncrementTick+0x14c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b40      	ldr	r3, [pc, #256]	; (8001ff4 <xTaskIncrementTick+0x150>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a3e      	ldr	r2, [pc, #248]	; (8001ff0 <xTaskIncrementTick+0x14c>)
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	4a3e      	ldr	r2, [pc, #248]	; (8001ff4 <xTaskIncrementTick+0x150>)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <xTaskIncrementTick+0x154>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3301      	adds	r3, #1
 8001f06:	4a3c      	ldr	r2, [pc, #240]	; (8001ff8 <xTaskIncrementTick+0x154>)
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	f000 f995 	bl	8002238 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001f0e:	4b3b      	ldr	r3, [pc, #236]	; (8001ffc <xTaskIncrementTick+0x158>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d348      	bcc.n	8001faa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f18:	4b35      	ldr	r3, [pc, #212]	; (8001ff0 <xTaskIncrementTick+0x14c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d104      	bne.n	8001f2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f22:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <xTaskIncrementTick+0x158>)
 8001f24:	f04f 32ff 	mov.w	r2, #4294967295
 8001f28:	601a      	str	r2, [r3, #0]
					break;
 8001f2a:	e03e      	b.n	8001faa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f2c:	4b30      	ldr	r3, [pc, #192]	; (8001ff0 <xTaskIncrementTick+0x14c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d203      	bcs.n	8001f4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001f44:	4a2d      	ldr	r2, [pc, #180]	; (8001ffc <xTaskIncrementTick+0x158>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001f4a:	e02e      	b.n	8001faa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fc50 	bl	80017f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d004      	beq.n	8001f68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3318      	adds	r3, #24
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fc47 	bl	80017f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	4b23      	ldr	r3, [pc, #140]	; (8002000 <xTaskIncrementTick+0x15c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	4a22      	ldr	r2, [pc, #136]	; (8002000 <xTaskIncrementTick+0x15c>)
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <xTaskIncrementTick+0x160>)
 8001f88:	441a      	add	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4610      	mov	r0, r2
 8001f92:	f7ff fc0c 	bl	80017ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <xTaskIncrementTick+0x164>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d3b9      	bcc.n	8001f18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fa8:	e7b6      	b.n	8001f18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001faa:	4b17      	ldr	r3, [pc, #92]	; (8002008 <xTaskIncrementTick+0x164>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb0:	4914      	ldr	r1, [pc, #80]	; (8002004 <xTaskIncrementTick+0x160>)
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d901      	bls.n	8001fc6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <xTaskIncrementTick+0x168>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d007      	beq.n	8001fde <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	e004      	b.n	8001fde <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <xTaskIncrementTick+0x16c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	4a0d      	ldr	r2, [pc, #52]	; (8002010 <xTaskIncrementTick+0x16c>)
 8001fdc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001fde:	697b      	ldr	r3, [r7, #20]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	200003b4 	.word	0x200003b4
 8001fec:	20000390 	.word	0x20000390
 8001ff0:	20000344 	.word	0x20000344
 8001ff4:	20000348 	.word	0x20000348
 8001ff8:	200003a4 	.word	0x200003a4
 8001ffc:	200003ac 	.word	0x200003ac
 8002000:	20000394 	.word	0x20000394
 8002004:	20000290 	.word	0x20000290
 8002008:	2000028c 	.word	0x2000028c
 800200c:	200003a0 	.word	0x200003a0
 8002010:	2000039c 	.word	0x2000039c

08002014 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800201a:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <vTaskSwitchContext+0xa4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002022:	4b26      	ldr	r3, [pc, #152]	; (80020bc <vTaskSwitchContext+0xa8>)
 8002024:	2201      	movs	r2, #1
 8002026:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002028:	e03f      	b.n	80020aa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800202a:	4b24      	ldr	r3, [pc, #144]	; (80020bc <vTaskSwitchContext+0xa8>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <vTaskSwitchContext+0xac>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	fab3 f383 	clz	r3, r3
 800203c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800203e:	7afb      	ldrb	r3, [r7, #11]
 8002040:	f1c3 031f 	rsb	r3, r3, #31
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	491f      	ldr	r1, [pc, #124]	; (80020c4 <vTaskSwitchContext+0xb0>)
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10a      	bne.n	8002070 <vTaskSwitchContext+0x5c>
	__asm volatile
 800205a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800205e:	f383 8811 	msr	BASEPRI, r3
 8002062:	f3bf 8f6f 	isb	sy
 8002066:	f3bf 8f4f 	dsb	sy
 800206a:	607b      	str	r3, [r7, #4]
}
 800206c:	bf00      	nop
 800206e:	e7fe      	b.n	800206e <vTaskSwitchContext+0x5a>
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <vTaskSwitchContext+0xb0>)
 800207c:	4413      	add	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	3308      	adds	r3, #8
 8002092:	429a      	cmp	r2, r3
 8002094:	d104      	bne.n	80020a0 <vTaskSwitchContext+0x8c>
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <vTaskSwitchContext+0xb4>)
 80020a8:	6013      	str	r3, [r2, #0]
}
 80020aa:	bf00      	nop
 80020ac:	371c      	adds	r7, #28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	200003b4 	.word	0x200003b4
 80020bc:	200003a0 	.word	0x200003a0
 80020c0:	20000394 	.word	0x20000394
 80020c4:	20000290 	.word	0x20000290
 80020c8:	2000028c 	.word	0x2000028c

080020cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80020d4:	f000 f852 	bl	800217c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <prvIdleTask+0x28>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d9f9      	bls.n	80020d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <prvIdleTask+0x2c>)
 80020e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	f3bf 8f4f 	dsb	sy
 80020ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80020f0:	e7f0      	b.n	80020d4 <prvIdleTask+0x8>
 80020f2:	bf00      	nop
 80020f4:	20000290 	.word	0x20000290
 80020f8:	e000ed04 	.word	0xe000ed04

080020fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	e00c      	b.n	8002122 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <prvInitialiseTaskLists+0x60>)
 8002114:	4413      	add	r3, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fb1c 	bl	8001754 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3301      	adds	r3, #1
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b06      	cmp	r3, #6
 8002126:	d9ef      	bls.n	8002108 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002128:	480d      	ldr	r0, [pc, #52]	; (8002160 <prvInitialiseTaskLists+0x64>)
 800212a:	f7ff fb13 	bl	8001754 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800212e:	480d      	ldr	r0, [pc, #52]	; (8002164 <prvInitialiseTaskLists+0x68>)
 8002130:	f7ff fb10 	bl	8001754 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002134:	480c      	ldr	r0, [pc, #48]	; (8002168 <prvInitialiseTaskLists+0x6c>)
 8002136:	f7ff fb0d 	bl	8001754 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800213a:	480c      	ldr	r0, [pc, #48]	; (800216c <prvInitialiseTaskLists+0x70>)
 800213c:	f7ff fb0a 	bl	8001754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002140:	480b      	ldr	r0, [pc, #44]	; (8002170 <prvInitialiseTaskLists+0x74>)
 8002142:	f7ff fb07 	bl	8001754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <prvInitialiseTaskLists+0x78>)
 8002148:	4a05      	ldr	r2, [pc, #20]	; (8002160 <prvInitialiseTaskLists+0x64>)
 800214a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <prvInitialiseTaskLists+0x7c>)
 800214e:	4a05      	ldr	r2, [pc, #20]	; (8002164 <prvInitialiseTaskLists+0x68>)
 8002150:	601a      	str	r2, [r3, #0]
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000290 	.word	0x20000290
 8002160:	2000031c 	.word	0x2000031c
 8002164:	20000330 	.word	0x20000330
 8002168:	2000034c 	.word	0x2000034c
 800216c:	20000360 	.word	0x20000360
 8002170:	20000378 	.word	0x20000378
 8002174:	20000344 	.word	0x20000344
 8002178:	20000348 	.word	0x20000348

0800217c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002182:	e019      	b.n	80021b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002184:	f000 f9c6 	bl	8002514 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002188:	4b10      	ldr	r3, [pc, #64]	; (80021cc <prvCheckTasksWaitingTermination+0x50>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3304      	adds	r3, #4
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fb2e 	bl	80017f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <prvCheckTasksWaitingTermination+0x54>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	4a0b      	ldr	r2, [pc, #44]	; (80021d0 <prvCheckTasksWaitingTermination+0x54>)
 80021a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <prvCheckTasksWaitingTermination+0x58>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	3b01      	subs	r3, #1
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <prvCheckTasksWaitingTermination+0x58>)
 80021ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80021ae:	f000 f9e1 	bl	8002574 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f810 	bl	80021d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <prvCheckTasksWaitingTermination+0x58>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e1      	bne.n	8002184 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000360 	.word	0x20000360
 80021d0:	2000038c 	.word	0x2000038c
 80021d4:	20000374 	.word	0x20000374

080021d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d108      	bne.n	80021fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 fb3e 	bl	8002870 <vPortFree>
				vPortFree( pxTCB );
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fb3b 	bl	8002870 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80021fa:	e018      	b.n	800222e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002202:	2b01      	cmp	r3, #1
 8002204:	d103      	bne.n	800220e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fb32 	bl	8002870 <vPortFree>
	}
 800220c:	e00f      	b.n	800222e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002214:	2b02      	cmp	r3, #2
 8002216:	d00a      	beq.n	800222e <prvDeleteTCB+0x56>
	__asm volatile
 8002218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	60fb      	str	r3, [r7, #12]
}
 800222a:	bf00      	nop
 800222c:	e7fe      	b.n	800222c <prvDeleteTCB+0x54>
	}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <prvResetNextTaskUnblockTime+0x38>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d104      	bne.n	8002252 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <prvResetNextTaskUnblockTime+0x3c>)
 800224a:	f04f 32ff 	mov.w	r2, #4294967295
 800224e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002250:	e008      	b.n	8002264 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <prvResetNextTaskUnblockTime+0x38>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <prvResetNextTaskUnblockTime+0x3c>)
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	20000344 	.word	0x20000344
 8002274:	200003ac 	.word	0x200003ac

08002278 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <xTaskGetSchedulerState+0x34>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d102      	bne.n	800228c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002286:	2301      	movs	r3, #1
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	e008      	b.n	800229e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <xTaskGetSchedulerState+0x38>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002294:	2302      	movs	r3, #2
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	e001      	b.n	800229e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800229e:	687b      	ldr	r3, [r7, #4]
	}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	20000398 	.word	0x20000398
 80022b0:	200003b4 	.word	0x200003b4

080022b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	3b04      	subs	r3, #4
 80022c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	3b04      	subs	r3, #4
 80022d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f023 0201 	bic.w	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3b04      	subs	r3, #4
 80022e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80022e4:	4a0c      	ldr	r2, [pc, #48]	; (8002318 <pxPortInitialiseStack+0x64>)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3b14      	subs	r3, #20
 80022ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3b04      	subs	r3, #4
 80022fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f06f 0202 	mvn.w	r2, #2
 8002302:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3b20      	subs	r3, #32
 8002308:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800230a:	68fb      	ldr	r3, [r7, #12]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	0800231d 	.word	0x0800231d

0800231c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <prvTaskExitError+0x54>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232e:	d00a      	beq.n	8002346 <prvTaskExitError+0x2a>
	__asm volatile
 8002330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002334:	f383 8811 	msr	BASEPRI, r3
 8002338:	f3bf 8f6f 	isb	sy
 800233c:	f3bf 8f4f 	dsb	sy
 8002340:	60fb      	str	r3, [r7, #12]
}
 8002342:	bf00      	nop
 8002344:	e7fe      	b.n	8002344 <prvTaskExitError+0x28>
	__asm volatile
 8002346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234a:	f383 8811 	msr	BASEPRI, r3
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	f3bf 8f4f 	dsb	sy
 8002356:	60bb      	str	r3, [r7, #8]
}
 8002358:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800235a:	bf00      	nop
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0fc      	beq.n	800235c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002362:	bf00      	nop
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	2000000c 	.word	0x2000000c
	...

08002380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002380:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <pxCurrentTCBConst2>)
 8002382:	6819      	ldr	r1, [r3, #0]
 8002384:	6808      	ldr	r0, [r1, #0]
 8002386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800238a:	f380 8809 	msr	PSP, r0
 800238e:	f3bf 8f6f 	isb	sy
 8002392:	f04f 0000 	mov.w	r0, #0
 8002396:	f380 8811 	msr	BASEPRI, r0
 800239a:	4770      	bx	lr
 800239c:	f3af 8000 	nop.w

080023a0 <pxCurrentTCBConst2>:
 80023a0:	2000028c 	.word	0x2000028c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop

080023a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80023a8:	4808      	ldr	r0, [pc, #32]	; (80023cc <prvPortStartFirstTask+0x24>)
 80023aa:	6800      	ldr	r0, [r0, #0]
 80023ac:	6800      	ldr	r0, [r0, #0]
 80023ae:	f380 8808 	msr	MSP, r0
 80023b2:	f04f 0000 	mov.w	r0, #0
 80023b6:	f380 8814 	msr	CONTROL, r0
 80023ba:	b662      	cpsie	i
 80023bc:	b661      	cpsie	f
 80023be:	f3bf 8f4f 	dsb	sy
 80023c2:	f3bf 8f6f 	isb	sy
 80023c6:	df00      	svc	0
 80023c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80023ca:	bf00      	nop
 80023cc:	e000ed08 	.word	0xe000ed08

080023d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80023d6:	4b46      	ldr	r3, [pc, #280]	; (80024f0 <xPortStartScheduler+0x120>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a46      	ldr	r2, [pc, #280]	; (80024f4 <xPortStartScheduler+0x124>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d10a      	bne.n	80023f6 <xPortStartScheduler+0x26>
	__asm volatile
 80023e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e4:	f383 8811 	msr	BASEPRI, r3
 80023e8:	f3bf 8f6f 	isb	sy
 80023ec:	f3bf 8f4f 	dsb	sy
 80023f0:	613b      	str	r3, [r7, #16]
}
 80023f2:	bf00      	nop
 80023f4:	e7fe      	b.n	80023f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80023f6:	4b3e      	ldr	r3, [pc, #248]	; (80024f0 <xPortStartScheduler+0x120>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a3f      	ldr	r2, [pc, #252]	; (80024f8 <xPortStartScheduler+0x128>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d10a      	bne.n	8002416 <xPortStartScheduler+0x46>
	__asm volatile
 8002400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002404:	f383 8811 	msr	BASEPRI, r3
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	60fb      	str	r3, [r7, #12]
}
 8002412:	bf00      	nop
 8002414:	e7fe      	b.n	8002414 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002416:	4b39      	ldr	r3, [pc, #228]	; (80024fc <xPortStartScheduler+0x12c>)
 8002418:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	22ff      	movs	r2, #255	; 0xff
 8002426:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4b31      	ldr	r3, [pc, #196]	; (8002500 <xPortStartScheduler+0x130>)
 800243c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800243e:	4b31      	ldr	r3, [pc, #196]	; (8002504 <xPortStartScheduler+0x134>)
 8002440:	2207      	movs	r2, #7
 8002442:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002444:	e009      	b.n	800245a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002446:	4b2f      	ldr	r3, [pc, #188]	; (8002504 <xPortStartScheduler+0x134>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3b01      	subs	r3, #1
 800244c:	4a2d      	ldr	r2, [pc, #180]	; (8002504 <xPortStartScheduler+0x134>)
 800244e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002462:	2b80      	cmp	r3, #128	; 0x80
 8002464:	d0ef      	beq.n	8002446 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002466:	4b27      	ldr	r3, [pc, #156]	; (8002504 <xPortStartScheduler+0x134>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f1c3 0307 	rsb	r3, r3, #7
 800246e:	2b04      	cmp	r3, #4
 8002470:	d00a      	beq.n	8002488 <xPortStartScheduler+0xb8>
	__asm volatile
 8002472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	60bb      	str	r3, [r7, #8]
}
 8002484:	bf00      	nop
 8002486:	e7fe      	b.n	8002486 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <xPortStartScheduler+0x134>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	4a1d      	ldr	r2, [pc, #116]	; (8002504 <xPortStartScheduler+0x134>)
 8002490:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002492:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <xPortStartScheduler+0x134>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800249a:	4a1a      	ldr	r2, [pc, #104]	; (8002504 <xPortStartScheduler+0x134>)
 800249c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80024a6:	4b18      	ldr	r3, [pc, #96]	; (8002508 <xPortStartScheduler+0x138>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a17      	ldr	r2, [pc, #92]	; (8002508 <xPortStartScheduler+0x138>)
 80024ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <xPortStartScheduler+0x138>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a14      	ldr	r2, [pc, #80]	; (8002508 <xPortStartScheduler+0x138>)
 80024b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80024bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80024be:	f000 f8dd 	bl	800267c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80024c2:	4b12      	ldr	r3, [pc, #72]	; (800250c <xPortStartScheduler+0x13c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80024c8:	f000 f8fc 	bl	80026c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80024cc:	4b10      	ldr	r3, [pc, #64]	; (8002510 <xPortStartScheduler+0x140>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a0f      	ldr	r2, [pc, #60]	; (8002510 <xPortStartScheduler+0x140>)
 80024d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80024d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80024d8:	f7ff ff66 	bl	80023a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80024dc:	f7ff fd9a 	bl	8002014 <vTaskSwitchContext>
	prvTaskExitError();
 80024e0:	f7ff ff1c 	bl	800231c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	e000ed00 	.word	0xe000ed00
 80024f4:	410fc271 	.word	0x410fc271
 80024f8:	410fc270 	.word	0x410fc270
 80024fc:	e000e400 	.word	0xe000e400
 8002500:	200003b8 	.word	0x200003b8
 8002504:	200003bc 	.word	0x200003bc
 8002508:	e000ed20 	.word	0xe000ed20
 800250c:	2000000c 	.word	0x2000000c
 8002510:	e000ef34 	.word	0xe000ef34

08002514 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
	__asm volatile
 800251a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251e:	f383 8811 	msr	BASEPRI, r3
 8002522:	f3bf 8f6f 	isb	sy
 8002526:	f3bf 8f4f 	dsb	sy
 800252a:	607b      	str	r3, [r7, #4]
}
 800252c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <vPortEnterCritical+0x58>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	3301      	adds	r3, #1
 8002534:	4a0d      	ldr	r2, [pc, #52]	; (800256c <vPortEnterCritical+0x58>)
 8002536:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <vPortEnterCritical+0x58>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d10f      	bne.n	8002560 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <vPortEnterCritical+0x5c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <vPortEnterCritical+0x4c>
	__asm volatile
 800254a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254e:	f383 8811 	msr	BASEPRI, r3
 8002552:	f3bf 8f6f 	isb	sy
 8002556:	f3bf 8f4f 	dsb	sy
 800255a:	603b      	str	r3, [r7, #0]
}
 800255c:	bf00      	nop
 800255e:	e7fe      	b.n	800255e <vPortEnterCritical+0x4a>
	}
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	2000000c 	.word	0x2000000c
 8002570:	e000ed04 	.word	0xe000ed04

08002574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <vPortExitCritical+0x50>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10a      	bne.n	8002598 <vPortExitCritical+0x24>
	__asm volatile
 8002582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002586:	f383 8811 	msr	BASEPRI, r3
 800258a:	f3bf 8f6f 	isb	sy
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	607b      	str	r3, [r7, #4]
}
 8002594:	bf00      	nop
 8002596:	e7fe      	b.n	8002596 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <vPortExitCritical+0x50>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	3b01      	subs	r3, #1
 800259e:	4a09      	ldr	r2, [pc, #36]	; (80025c4 <vPortExitCritical+0x50>)
 80025a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <vPortExitCritical+0x50>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d105      	bne.n	80025b6 <vPortExitCritical+0x42>
 80025aa:	2300      	movs	r3, #0
 80025ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80025b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	2000000c 	.word	0x2000000c
	...

080025d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80025d0:	f3ef 8009 	mrs	r0, PSP
 80025d4:	f3bf 8f6f 	isb	sy
 80025d8:	4b15      	ldr	r3, [pc, #84]	; (8002630 <pxCurrentTCBConst>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	f01e 0f10 	tst.w	lr, #16
 80025e0:	bf08      	it	eq
 80025e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80025e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025ea:	6010      	str	r0, [r2, #0]
 80025ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80025f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80025f4:	f380 8811 	msr	BASEPRI, r0
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	f3bf 8f6f 	isb	sy
 8002600:	f7ff fd08 	bl	8002014 <vTaskSwitchContext>
 8002604:	f04f 0000 	mov.w	r0, #0
 8002608:	f380 8811 	msr	BASEPRI, r0
 800260c:	bc09      	pop	{r0, r3}
 800260e:	6819      	ldr	r1, [r3, #0]
 8002610:	6808      	ldr	r0, [r1, #0]
 8002612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002616:	f01e 0f10 	tst.w	lr, #16
 800261a:	bf08      	it	eq
 800261c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002620:	f380 8809 	msr	PSP, r0
 8002624:	f3bf 8f6f 	isb	sy
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	f3af 8000 	nop.w

08002630 <pxCurrentTCBConst>:
 8002630:	2000028c 	.word	0x2000028c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop

08002638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
	__asm volatile
 800263e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002642:	f383 8811 	msr	BASEPRI, r3
 8002646:	f3bf 8f6f 	isb	sy
 800264a:	f3bf 8f4f 	dsb	sy
 800264e:	607b      	str	r3, [r7, #4]
}
 8002650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002652:	f7ff fc27 	bl	8001ea4 <xTaskIncrementTick>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <xPortSysTickHandler+0x40>)
 800265e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	2300      	movs	r3, #0
 8002666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	f383 8811 	msr	BASEPRI, r3
}
 800266e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	e000ed04 	.word	0xe000ed04

0800267c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <vPortSetupTimerInterrupt+0x34>)
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <vPortSetupTimerInterrupt+0x38>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800268c:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <vPortSetupTimerInterrupt+0x3c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <vPortSetupTimerInterrupt+0x40>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	099b      	lsrs	r3, r3, #6
 8002698:	4a09      	ldr	r2, [pc, #36]	; (80026c0 <vPortSetupTimerInterrupt+0x44>)
 800269a:	3b01      	subs	r3, #1
 800269c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800269e:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <vPortSetupTimerInterrupt+0x34>)
 80026a0:	2207      	movs	r2, #7
 80026a2:	601a      	str	r2, [r3, #0]
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000e010 	.word	0xe000e010
 80026b4:	e000e018 	.word	0xe000e018
 80026b8:	20000000 	.word	0x20000000
 80026bc:	10624dd3 	.word	0x10624dd3
 80026c0:	e000e014 	.word	0xe000e014

080026c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80026c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80026d4 <vPortEnableVFP+0x10>
 80026c8:	6801      	ldr	r1, [r0, #0]
 80026ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80026ce:	6001      	str	r1, [r0, #0]
 80026d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80026d2:	bf00      	nop
 80026d4:	e000ed88 	.word	0xe000ed88

080026d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	; 0x28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80026e4:	f7ff fb34 	bl	8001d50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80026e8:	4b5b      	ldr	r3, [pc, #364]	; (8002858 <pvPortMalloc+0x180>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80026f0:	f000 f920 	bl	8002934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80026f4:	4b59      	ldr	r3, [pc, #356]	; (800285c <pvPortMalloc+0x184>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f040 8093 	bne.w	8002828 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01d      	beq.n	8002744 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002708:	2208      	movs	r2, #8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	2b00      	cmp	r3, #0
 8002718:	d014      	beq.n	8002744 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f023 0307 	bic.w	r3, r3, #7
 8002720:	3308      	adds	r3, #8
 8002722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <pvPortMalloc+0x6c>
	__asm volatile
 800272e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002732:	f383 8811 	msr	BASEPRI, r3
 8002736:	f3bf 8f6f 	isb	sy
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	617b      	str	r3, [r7, #20]
}
 8002740:	bf00      	nop
 8002742:	e7fe      	b.n	8002742 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d06e      	beq.n	8002828 <pvPortMalloc+0x150>
 800274a:	4b45      	ldr	r3, [pc, #276]	; (8002860 <pvPortMalloc+0x188>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	429a      	cmp	r2, r3
 8002752:	d869      	bhi.n	8002828 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002754:	4b43      	ldr	r3, [pc, #268]	; (8002864 <pvPortMalloc+0x18c>)
 8002756:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002758:	4b42      	ldr	r3, [pc, #264]	; (8002864 <pvPortMalloc+0x18c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800275e:	e004      	b.n	800276a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	d903      	bls.n	800277c <pvPortMalloc+0xa4>
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f1      	bne.n	8002760 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800277c:	4b36      	ldr	r3, [pc, #216]	; (8002858 <pvPortMalloc+0x180>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002782:	429a      	cmp	r2, r3
 8002784:	d050      	beq.n	8002828 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2208      	movs	r2, #8
 800278c:	4413      	add	r3, r2
 800278e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	1ad2      	subs	r2, r2, r3
 80027a0:	2308      	movs	r3, #8
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d91f      	bls.n	80027e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80027a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <pvPortMalloc+0xf8>
	__asm volatile
 80027ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	613b      	str	r3, [r7, #16]
}
 80027cc:	bf00      	nop
 80027ce:	e7fe      	b.n	80027ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	1ad2      	subs	r2, r2, r3
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80027e2:	69b8      	ldr	r0, [r7, #24]
 80027e4:	f000 f908 	bl	80029f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <pvPortMalloc+0x188>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	4a1b      	ldr	r2, [pc, #108]	; (8002860 <pvPortMalloc+0x188>)
 80027f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80027f6:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <pvPortMalloc+0x188>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <pvPortMalloc+0x190>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d203      	bcs.n	800280a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002802:	4b17      	ldr	r3, [pc, #92]	; (8002860 <pvPortMalloc+0x188>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a18      	ldr	r2, [pc, #96]	; (8002868 <pvPortMalloc+0x190>)
 8002808:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	4b13      	ldr	r3, [pc, #76]	; (800285c <pvPortMalloc+0x184>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	431a      	orrs	r2, r3
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800281e:	4b13      	ldr	r3, [pc, #76]	; (800286c <pvPortMalloc+0x194>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3301      	adds	r3, #1
 8002824:	4a11      	ldr	r2, [pc, #68]	; (800286c <pvPortMalloc+0x194>)
 8002826:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002828:	f7ff faa0 	bl	8001d6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <pvPortMalloc+0x174>
	__asm volatile
 8002836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283a:	f383 8811 	msr	BASEPRI, r3
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	60fb      	str	r3, [r7, #12]
}
 8002848:	bf00      	nop
 800284a:	e7fe      	b.n	800284a <pvPortMalloc+0x172>
	return pvReturn;
 800284c:	69fb      	ldr	r3, [r7, #28]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3728      	adds	r7, #40	; 0x28
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20003fc8 	.word	0x20003fc8
 800285c:	20003fdc 	.word	0x20003fdc
 8002860:	20003fcc 	.word	0x20003fcc
 8002864:	20003fc0 	.word	0x20003fc0
 8002868:	20003fd0 	.word	0x20003fd0
 800286c:	20003fd4 	.word	0x20003fd4

08002870 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d04d      	beq.n	800291e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002882:	2308      	movs	r3, #8
 8002884:	425b      	negs	r3, r3
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4413      	add	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	4b24      	ldr	r3, [pc, #144]	; (8002928 <vPortFree+0xb8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10a      	bne.n	80028b4 <vPortFree+0x44>
	__asm volatile
 800289e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a2:	f383 8811 	msr	BASEPRI, r3
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	f3bf 8f4f 	dsb	sy
 80028ae:	60fb      	str	r3, [r7, #12]
}
 80028b0:	bf00      	nop
 80028b2:	e7fe      	b.n	80028b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <vPortFree+0x62>
	__asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	60bb      	str	r3, [r7, #8]
}
 80028ce:	bf00      	nop
 80028d0:	e7fe      	b.n	80028d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	4b14      	ldr	r3, [pc, #80]	; (8002928 <vPortFree+0xb8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d01e      	beq.n	800291e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d11a      	bne.n	800291e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <vPortFree+0xb8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	401a      	ands	r2, r3
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80028f8:	f7ff fa2a 	bl	8001d50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <vPortFree+0xbc>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4413      	add	r3, r2
 8002906:	4a09      	ldr	r2, [pc, #36]	; (800292c <vPortFree+0xbc>)
 8002908:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800290a:	6938      	ldr	r0, [r7, #16]
 800290c:	f000 f874 	bl	80029f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002910:	4b07      	ldr	r3, [pc, #28]	; (8002930 <vPortFree+0xc0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	3301      	adds	r3, #1
 8002916:	4a06      	ldr	r2, [pc, #24]	; (8002930 <vPortFree+0xc0>)
 8002918:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800291a:	f7ff fa27 	bl	8001d6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800291e:	bf00      	nop
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20003fdc 	.word	0x20003fdc
 800292c:	20003fcc 	.word	0x20003fcc
 8002930:	20003fd8 	.word	0x20003fd8

08002934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800293a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800293e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002940:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <prvHeapInit+0xac>)
 8002942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00c      	beq.n	8002968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3307      	adds	r3, #7
 8002952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0307 	bic.w	r3, r3, #7
 800295a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	4a1f      	ldr	r2, [pc, #124]	; (80029e0 <prvHeapInit+0xac>)
 8002964:	4413      	add	r3, r2
 8002966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800296c:	4a1d      	ldr	r2, [pc, #116]	; (80029e4 <prvHeapInit+0xb0>)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002972:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <prvHeapInit+0xb0>)
 8002974:	2200      	movs	r2, #0
 8002976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	4413      	add	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002980:	2208      	movs	r2, #8
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f023 0307 	bic.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <prvHeapInit+0xb4>)
 8002994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <prvHeapInit+0xb4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2200      	movs	r2, #0
 800299c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800299e:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <prvHeapInit+0xb4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	1ad2      	subs	r2, r2, r3
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <prvHeapInit+0xb4>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	4a0a      	ldr	r2, [pc, #40]	; (80029ec <prvHeapInit+0xb8>)
 80029c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a09      	ldr	r2, [pc, #36]	; (80029f0 <prvHeapInit+0xbc>)
 80029ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <prvHeapInit+0xc0>)
 80029ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80029d2:	601a      	str	r2, [r3, #0]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	200003c0 	.word	0x200003c0
 80029e4:	20003fc0 	.word	0x20003fc0
 80029e8:	20003fc8 	.word	0x20003fc8
 80029ec:	20003fd0 	.word	0x20003fd0
 80029f0:	20003fcc 	.word	0x20003fcc
 80029f4:	20003fdc 	.word	0x20003fdc

080029f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a00:	4b28      	ldr	r3, [pc, #160]	; (8002aa4 <prvInsertBlockIntoFreeList+0xac>)
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	e002      	b.n	8002a0c <prvInsertBlockIntoFreeList+0x14>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d8f7      	bhi.n	8002a06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	4413      	add	r3, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d108      	bne.n	8002a3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	441a      	add	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	441a      	add	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d118      	bne.n	8002a80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d00d      	beq.n	8002a76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	441a      	add	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	e008      	b.n	8002a88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	e003      	b.n	8002a88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d002      	beq.n	8002a96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20003fc0 	.word	0x20003fc0
 8002aa8:	20003fc8 	.word	0x20003fc8

08002aac <__libc_init_array>:
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	4d0d      	ldr	r5, [pc, #52]	; (8002ae4 <__libc_init_array+0x38>)
 8002ab0:	4c0d      	ldr	r4, [pc, #52]	; (8002ae8 <__libc_init_array+0x3c>)
 8002ab2:	1b64      	subs	r4, r4, r5
 8002ab4:	10a4      	asrs	r4, r4, #2
 8002ab6:	2600      	movs	r6, #0
 8002ab8:	42a6      	cmp	r6, r4
 8002aba:	d109      	bne.n	8002ad0 <__libc_init_array+0x24>
 8002abc:	4d0b      	ldr	r5, [pc, #44]	; (8002aec <__libc_init_array+0x40>)
 8002abe:	4c0c      	ldr	r4, [pc, #48]	; (8002af0 <__libc_init_array+0x44>)
 8002ac0:	f000 f820 	bl	8002b04 <_init>
 8002ac4:	1b64      	subs	r4, r4, r5
 8002ac6:	10a4      	asrs	r4, r4, #2
 8002ac8:	2600      	movs	r6, #0
 8002aca:	42a6      	cmp	r6, r4
 8002acc:	d105      	bne.n	8002ada <__libc_init_array+0x2e>
 8002ace:	bd70      	pop	{r4, r5, r6, pc}
 8002ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad4:	4798      	blx	r3
 8002ad6:	3601      	adds	r6, #1
 8002ad8:	e7ee      	b.n	8002ab8 <__libc_init_array+0xc>
 8002ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ade:	4798      	blx	r3
 8002ae0:	3601      	adds	r6, #1
 8002ae2:	e7f2      	b.n	8002aca <__libc_init_array+0x1e>
 8002ae4:	08002b4c 	.word	0x08002b4c
 8002ae8:	08002b4c 	.word	0x08002b4c
 8002aec:	08002b4c 	.word	0x08002b4c
 8002af0:	08002b50 	.word	0x08002b50

08002af4 <memset>:
 8002af4:	4402      	add	r2, r0
 8002af6:	4603      	mov	r3, r0
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d100      	bne.n	8002afe <memset+0xa>
 8002afc:	4770      	bx	lr
 8002afe:	f803 1b01 	strb.w	r1, [r3], #1
 8002b02:	e7f9      	b.n	8002af8 <memset+0x4>

08002b04 <_init>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	bf00      	nop
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr

08002b10 <_fini>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	bf00      	nop
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr
